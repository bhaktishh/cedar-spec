warning: unused manifest key: dependencies.serde.feature
   Compiling cedar-drt v4.0.0 (/local/home/bhaktish/cedar-spec/cedar-drt)
warning: unused import: `cedar_policy::Entity`
  --> /local/home/bhaktish/cedar-spec/cedar/cedar-testing/src/cedar_test_impl.rs:23:5
   |
23 | use cedar_policy::Entity;
   |     ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `schema`
   --> /local/home/bhaktish/cedar-spec/cedar/cedar-testing/src/cedar_test_impl.rs:413:13
    |
413 |             schema: &ValidatorSchema,
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_schema`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `entities`
   --> /local/home/bhaktish/cedar-spec/cedar/cedar-testing/src/cedar_test_impl.rs:414:13
    |
414 |             entities: Entities,
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_entities`

warning: unused variable: `schema`
   --> /local/home/bhaktish/cedar-spec/cedar/cedar-testing/src/cedar_test_impl.rs:421:9
    |
421 |         schema: &ValidatorSchema,
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_schema`

warning: unused variable: `request`
   --> /local/home/bhaktish/cedar-spec/cedar/cedar-testing/src/cedar_test_impl.rs:422:9
    |
422 |         request: &ast::Request,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_request`

   Compiling cedar-drt-inner v0.0.0 (/local/home/bhaktish/cedar-spec/cedar-drt/fuzz)
warning: `cedar-testing` (lib) generated 5 warnings (run `cargo fix --lib -p cedar-testing` to apply 1 suggestion)
warning: unnecessary trailing semicolon
   --> src/lib.rs:336:13
    |
336 |             ;
    |             ^ help: remove this semicolon
    |
    = note: `#[warn(redundant_semicolons)]` on by default

warning: unnecessary trailing semicolon
   --> src/lib.rs:373:13
    |
373 |             ;
    |             ^ help: remove this semicolon

warning: `cedar-drt-inner` (lib) generated 2 warnings
warning: unused import: `cedar_policy_core::ast`
  --> fuzz_targets/entity-validation.rs:20:6
   |
20 |  use cedar_policy_core::ast;
   |      ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `cedar_policy_core::ast::Entity`
  --> fuzz_targets/entity-validation.rs:21:6
   |
21 |  use cedar_policy_core::ast::Entity;
   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `abac::ABACPolicy`, `abac::ABACRequest`
  --> fuzz_targets/entity-validation.rs:23:32
   |
23 |  use cedar_policy_generators::{abac::ABACPolicy, schema::Schema, settings::ABACSettings, hierarchy::Hierarchy, abac::ABACRequest};
   |                                ^^^^^^^^^^^^^^^^                                                                ^^^^^^^^^^^^^^^^^

warning: `cedar-drt-inner` (bin "entity-validation") generated 3 warnings (run `cargo fix --bin "entity-validation"` to apply 3 suggestions)
    Finished `release` profile [optimized + debuginfo] target(s) in 1m 03s
warning: unused manifest key: dependencies.serde.feature
warning: unused import: `cedar_policy::Entity`
  --> /local/home/bhaktish/cedar-spec/cedar/cedar-testing/src/cedar_test_impl.rs:23:5
   |
23 | use cedar_policy::Entity;
   |     ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `schema`
   --> /local/home/bhaktish/cedar-spec/cedar/cedar-testing/src/cedar_test_impl.rs:413:13
    |
413 |             schema: &ValidatorSchema,
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_schema`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `entities`
   --> /local/home/bhaktish/cedar-spec/cedar/cedar-testing/src/cedar_test_impl.rs:414:13
    |
414 |             entities: Entities,
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_entities`

warning: unused variable: `schema`
   --> /local/home/bhaktish/cedar-spec/cedar/cedar-testing/src/cedar_test_impl.rs:421:9
    |
421 |         schema: &ValidatorSchema,
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_schema`

warning: unused variable: `request`
   --> /local/home/bhaktish/cedar-spec/cedar/cedar-testing/src/cedar_test_impl.rs:422:9
    |
422 |         request: &ast::Request,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_request`

warning: `cedar-testing` (lib) generated 5 warnings (run `cargo fix --lib -p cedar-testing` to apply 1 suggestion)
warning: unnecessary trailing semicolon
   --> src/lib.rs:336:13
    |
336 |             ;
    |             ^ help: remove this semicolon
    |
    = note: `#[warn(redundant_semicolons)]` on by default

warning: unnecessary trailing semicolon
   --> src/lib.rs:373:13
    |
373 |             ;
    |             ^ help: remove this semicolon

warning: `cedar-drt-inner` (lib) generated 2 warnings
warning: unused import: `cedar_policy_core::ast`
  --> fuzz_targets/entity-validation.rs:20:6
   |
20 |  use cedar_policy_core::ast;
   |      ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `cedar_policy_core::ast::Entity`
  --> fuzz_targets/entity-validation.rs:21:6
   |
21 |  use cedar_policy_core::ast::Entity;
   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `abac::ABACPolicy`, `abac::ABACRequest`
  --> fuzz_targets/entity-validation.rs:23:32
   |
23 |  use cedar_policy_generators::{abac::ABACPolicy, schema::Schema, settings::ABACSettings, hierarchy::Hierarchy, abac::ABACRequest};
   |                                ^^^^^^^^^^^^^^^^                                                                ^^^^^^^^^^^^^^^^^

warning: `cedar-drt-inner` (bin "entity-validation") generated 3 warnings (run `cargo fix --bin "entity-validation"` to apply 3 suggestions)
    Finished `release` profile [optimized + debuginfo] target(s) in 0.12s
     Running `fuzz/target/x86_64-unknown-linux-gnu/release/entity-validation -artifact_prefix=/local/home/bhaktish/cedar-spec/cedar-drt/fuzz/artifacts/entity-validation/ /local/home/bhaktish/cedar-spec/cedar-drt/fuzz/corpus/entity-validation`
WARNING: Failed to find function "__sanitizer_acquire_crash_state".
WARNING: Failed to find function "__sanitizer_print_stack_trace".
WARNING: Failed to find function "__sanitizer_set_death_callback".
INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 1815138849
INFO: Loaded 1 modules   (546141 inline 8-bit counters): 546141 [0x5593ca6675c8, 0x5593ca6ecb25), 
INFO: Loaded 1 PC tables (546141 PCs): 546141 [0x5593ca6ecb28,0x5593caf420f8), 
INFO:        0 files found in /local/home/bhaktish/cedar-spec/cedar-drt/fuzz/corpus/entity-validation
INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes
INFO: A corpus is not provided, starting from an empty corpus
#2	INITED exec/s: 0 rss: 55Mb
WARNING: no interesting inputs were found so far. Is the code instrumented for coverage?
This may also happen if the target rejected all inputs we tried so far
[2024-07-25T17:06:23Z DEBUG entity_validation] Schema: ValidatorSchema { entity_types: {EntityType(Name(UncheckedName { id: Id("a"), path: [Id("A")], loc: None })): ValidatorEntityType { name: EntityType(Name(UncheckedName { id: Id("a"), path: [Id("A")], loc: None })), descendants: {}, attributes: Attributes { attrs: {"r": AttributeType { attr_type: Primitive { primitive_type: String }, is_required: false }} }, open_attributes: ClosedAttributes }}, action_ids: {EntityUID { ty: EntityType(Name(UncheckedName { id: Id("Action"), path: [Id("A")], loc: None })), eid: Eid("action"), loc: None }: ValidatorActionId { name: EntityUID { ty: EntityType(Name(UncheckedName { id: Id("Action"), path: [Id("A")], loc: None })), eid: Eid("action"), loc: None }, applies_to: ValidatorApplySpec { principal_apply_spec: {EntityType(Name(UncheckedName { id: Id("a"), path: [Id("A")], loc: None }))}, resource_apply_spec: {EntityType(Name(UncheckedName { id: Id("a"), path: [Id("A")], loc: None }))} }, descendants: {}, context: EntityOrRecord(Record { attrs: Attributes { attrs: {} }, open_attributes: ClosedAttributes }), attribute_types: Attributes { attrs: {} }, attributes: {} }} }
[2024-07-25T17:06:23Z INFO  cedar_drt_inner] rust_auth (ns) : 56796
[2024-07-25T17:06:23Z DEBUG cedar_drt::lean_impl] requestStart
[2024-07-25T17:06:23Z DEBUG cedar_drt::lean_impl] {"schema":{"entityTypes":[["A::a",{"name":"A::a","descendants":[],"attributes":{"attrs":{"r":{"attrType":{"Primitive":{"primitiveType":"String"}},"isRequired":false}}},"open_attributes":"ClosedAttributes"}]],"actionIds":[[{"ty":"A::Action","eid":"action"},{"name":{"ty":"A::Action","eid":"action"},"appliesTo":{"principalApplySpec":["A::a"],"resourceApplySpec":["A::a"]},"descendants":[],"context":{"EntityOrRecord":{"Record":{"attrs":{"attrs":{}},"open_attributes":"ClosedAttributes"}}},"attributeTypes":{"attrs":{}},"attributes":{}}]]},"entities":{"entities":[[{"ty":"A::a","eid":""},{"uid":{"ty":"A::a","eid":""},"attrs":{"r":{"expr_kind":{"Lit":{"String":""}},"source_loc":null,"data":null}},"ancestors":[]}]]}}
[2024-07-25T17:06:23Z DEBUG cedar_drt::lean_impl] requestEnd
[2024-07-25T17:06:23Z INFO  cedar_drt::lean_impl] Lean validation time (ns) : 7479
thread '<unnamed>' panicked at /local/home/bhaktish/cedar-spec/cedar-drt/fuzz/src/lib.rs:377:17:
Definitional Errors: ["action type not defined in type store"]
, Rust output: Entities { entities: {EntityUID { ty: EntityType(Name(UncheckedName { id: Id("Action"), path: [Id("A")], loc: None })), eid: Eid("action"), loc: None }: Entity { uid: EntityUID { ty: EntityType(Name(UncheckedName { id: Id("Action"), path: [Id("A")], loc: None })), eid: Eid("action"), loc: None }, attrs: {}, ancestors: {} }, EntityUID { ty: EntityType(Name(UncheckedName { id: Id("a"), path: [Id("A")], loc: None })), eid: Eid(""), loc: None }: Entity { uid: EntityUID { ty: EntityType(Name(UncheckedName { id: Id("a"), path: [Id("A")], loc: None })), eid: Eid(""), loc: None }, attrs: {"r": PartialValueSerializedAsExpr(Value(Value { value: Lit(String("")), loc: None }))}, ancestors: {} }}, mode: Concrete }
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
==20715== ERROR: libFuzzer: deadly signal
NOTE: libFuzzer has rudimentary signal handlers.
      Combine libFuzzer with AddressSanitizer or similar for better crash reports.
SUMMARY: libFuzzer: deadly signal
MS: 4 ChangeBinInt-ChangeBit-InsertRepeatedBytes-InsertRepeatedBytes-; base unit: adc83b19e793491b1c6ea0fd8b46cd9f32e592fc
0x3,0x0,0x0,0x0,0x0,0xff,0xff,0xff,0xff,0xff,0xff,
\003\000\000\000\000\377\377\377\377\377\377
artifact_prefix='/local/home/bhaktish/cedar-spec/cedar-drt/fuzz/artifacts/entity-validation/'; Test unit written to /local/home/bhaktish/cedar-spec/cedar-drt/fuzz/artifacts/entity-validation/crash-b2c4e0a452b93ecc2fe3a18a76c9c3c15df2990a
Base64: AwAAAAD///////8=

────────────────────────────────────────────────────────────────────────────────

Failing input:

	fuzz/artifacts/entity-validation/crash-b2c4e0a452b93ecc2fe3a18a76c9c3c15df2990a

Output of `std::fmt::Debug`:

	FuzzTargetInput {
	    schema: Schema {
	        schema: NamespaceDefinition {
	            common_types: {},
	            entity_types: {
	                UnreservedId(
	                    Id(
	                        "a",
	                    ),
	                ): EntityType {
	                    member_of_types: [],
	                    shape: AttributesOrContext(
	                        Type(
	                            Record {
	                                attributes: {
	                                    "r": TypeOfAttribute {
	                                        ty: Type(
	                                            String,
	                                        ),
	                                        required: false,
	                                    },
	                                },
	                                additional_attributes: false,
	                            },
	                        ),
	                    ),
	                },
	            },
	            actions: {
	                "action": ActionType {
	                    attributes: None,
	                    applies_to: Some(
	                        ApplySpec {
	                            resource_types: [
	                                Name(
	                                    UncheckedName {
	                                        id: Id(
	                                            "a",
	                                        ),
	                                        path: [],
	                                        loc: None,
	                                    },
	                                ),
	                            ],
	                            principal_types: [
	                                Name(
	                                    UncheckedName {
	                                        id: Id(
	                                            "a",
	                                        ),
	                                        path: [],
	                                        loc: None,
	                                    },
	                                ),
	                            ],
	                            context: AttributesOrContext(
	                                Type(
	                                    Record {
	                                        attributes: {},
	                                        additional_attributes: false,
	                                    },
	                                ),
	                            ),
	                        },
	                    ),
	                    member_of: Some(
	                        [],
	                    ),
	                },
	            },
	        },
	        namespace: Some(
	            Name(
	                UncheckedName {
	                    id: Id(
	                        "A",
	                    ),
	                    path: [],
	                    loc: None,
	                },
	            ),
	        ),
	        settings: ABACSettings {
	            match_types: false,
	            enable_extensions: true,
	            max_depth: 7,
	            max_width: 7,
	            enable_additional_attributes: true,
	            enable_like: true,
	            enable_action_groups_and_attrs: true,
	            enable_arbitrary_func_call: true,
	            enable_unknowns: false,
	            enable_unspecified_apply_spec: true,
	            enable_action_in_constraints: true,
	        },
	        constant_pool: ConstantPool {
	            int_constants: [],
	            string_constants: [],
	        },
	        unknown_pool: UnknownPool {
	            unknowns: RefCell {
	                value: HashMap(
	                    {},
	                ),
	            },
	        },
	        ext_funcs: AvailableExtensionFunctions {
	            constructors: [
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "ip",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: true,
	                    parameter_types: [
	                        String,
	                    ],
	                    return_ty: IPAddr,
	                },
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "decimal",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: true,
	                    parameter_types: [
	                        String,
	                    ],
	                    return_ty: Decimal,
	                },
	            ],
	            all: [
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "ip",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: true,
	                    parameter_types: [
	                        String,
	                    ],
	                    return_ty: IPAddr,
	                },
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "isIpv4",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: false,
	                    parameter_types: [
	                        IPAddr,
	                    ],
	                    return_ty: Bool,
	                },
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "isIpv6",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: false,
	                    parameter_types: [
	                        IPAddr,
	                    ],
	                    return_ty: Bool,
	                },
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "isLoopback",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: false,
	                    parameter_types: [
	                        IPAddr,
	                    ],
	                    return_ty: Bool,
	                },
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "isMulticast",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: false,
	                    parameter_types: [
	                        IPAddr,
	                    ],
	                    return_ty: Bool,
	                },
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "isInRange",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: false,
	                    parameter_types: [
	                        IPAddr,
	                        IPAddr,
	                    ],
	                    return_ty: Bool,
	                },
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "decimal",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: true,
	                    parameter_types: [
	                        String,
	                    ],
	                    return_ty: Decimal,
	                },
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "lessThan",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: false,
	                    parameter_types: [
	                        Decimal,
	                        Decimal,
	                    ],
	                    return_ty: Bool,
	                },
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "lessThanOrEqual",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: false,
	                    parameter_types: [
	                        Decimal,
	                        Decimal,
	                    ],
	                    return_ty: Bool,
	                },
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "greaterThan",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: false,
	                    parameter_types: [
	                        Decimal,
	                        Decimal,
	                    ],
	                    return_ty: Bool,
	                },
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "greaterThanOrEqual",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: false,
	                    parameter_types: [
	                        Decimal,
	                        Decimal,
	                    ],
	                    return_ty: Bool,
	                },
	            ],
	            constructors_by_type: HashMap(
	                {},
	            ),
	            all_by_type: HashMap(
	                {},
	            ),
	        },
	        entity_types: [
	            EntityType(
	                Name(
	                    UncheckedName {
	                        id: Id(
	                            "a",
	                        ),
	                        path: [
	                            Id(
	                                "A",
	                            ),
	                        ],
	                        loc: None,
	                    },
	                ),
	            ),
	        ],
	        principal_types: [
	            EntityType(
	                Name(
	                    UncheckedName {
	                        id: Id(
	                            "a",
	                        ),
	                        path: [
	                            Id(
	                                "A",
	                            ),
	                        ],
	                        loc: None,
	                    },
	                ),
	            ),
	        ],
	        actions_eids: [
	            Eid(
	                "action",
	            ),
	        ],
	        resource_types: [
	            EntityType(
	                Name(
	                    UncheckedName {
	                        id: Id(
	                            "a",
	                        ),
	                        path: [
	                            Id(
	                                "A",
	                            ),
	                        ],
	                        loc: None,
	                    },
	                ),
	            ),
	        ],
	        attributes: [
	            (
	                "r",
	                Type(
	                    String,
	                ),
	            ),
	        ],
	        attributes_by_type: HashMap(
	            {
	                String: [
	                    (
	                        EntityType(
	                            Name(
	                                UncheckedName {
	                                    id: Id(
	                                        "a",
	                                    ),
	                                    path: [
	                                        Id(
	                                            "A",
	                                        ),
	                                    ],
	                                    loc: None,
	                                },
	                            ),
	                        ),
	                        "r",
	                    ),
	                ],
	            },
	        ),
	    },
	    hierarchy: Hierarchy {
	        entities: HashMap(
	            {
	                EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "a",
	                                ),
	                                path: [
	                                    Id(
	                                        "A",
	                                    ),
	                                ],
	                                loc: None,
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "",
	                    ),
	                    loc: None,
	                }: Entity {
	                    uid: EntityUID {
	                        ty: EntityType(
	                            Name(
	                                UncheckedName {
	                                    id: Id(
	                                        "a",
	                                    ),
	                                    path: [
	                                        Id(
	                                            "A",
	                                        ),
	                                    ],
	                                    loc: None,
	                                },
	                            ),
	                        ),
	                        eid: Eid(
	                            "",
	                        ),
	                        loc: None,
	                    },
	                    attrs: {
	                        "r": PartialValueSerializedAsExpr(
	                            Value(
	                                Value {
	                                    value: Lit(
	                                        String(
	                                            "",
	                                        ),
	                                    ),
	                                    loc: None,
	                                },
	                            ),
	                        ),
	                    },
	                    ancestors: {},
	                },
	            },
	        ),
	        uids: [
	            EntityUID {
	                ty: EntityType(
	                    Name(
	                        UncheckedName {
	                            id: Id(
	                                "a",
	                            ),
	                            path: [
	                                Id(
	                                    "A",
	                                ),
	                            ],
	                            loc: None,
	                        },
	                    ),
	                ),
	                eid: Eid(
	                    "",
	                ),
	                loc: None,
	            },
	        ],
	        uids_by_type: HashMap(
	            {
	                EntityType(
	                    Name(
	                        UncheckedName {
	                            id: Id(
	                                "a",
	                            ),
	                            path: [
	                                Id(
	                                    "A",
	                                ),
	                            ],
	                            loc: None,
	                        },
	                    ),
	                ): EntityUIDs {
	                    indices: HashMap(
	                        {
	                            EntityUID {
	                                ty: EntityType(
	                                    Name(
	                                        UncheckedName {
	                                            id: Id(
	                                                "a",
	                                            ),
	                                            path: [
	                                                Id(
	                                                    "A",
	                                                ),
	                                            ],
	                                            loc: None,
	                                        },
	                                    ),
	                                ),
	                                eid: Eid(
	                                    "",
	                                ),
	                                loc: None,
	                            }: 0,
	                        },
	                    ),
	                    uids: [
	                        EntityUID {
	                            ty: EntityType(
	                                Name(
	                                    UncheckedName {
	                                        id: Id(
	                                            "a",
	                                        ),
	                                        path: [
	                                            Id(
	                                                "A",
	                                            ),
	                                        ],
	                                        loc: None,
	                                    },
	                                ),
	                            ),
	                            eid: Eid(
	                                "",
	                            ),
	                            loc: None,
	                        },
	                    ],
	                },
	            },
	        ),
	        entity_types: [
	            EntityType(
	                Name(
	                    UncheckedName {
	                        id: Id(
	                            "a",
	                        ),
	                        path: [
	                            Id(
	                                "A",
	                            ),
	                        ],
	                        loc: None,
	                    },
	                ),
	            ),
	        ],
	    },
	}

Reproduce with:

	cargo fuzz run --sanitizer=none entity-validation fuzz/artifacts/entity-validation/crash-b2c4e0a452b93ecc2fe3a18a76c9c3c15df2990a

Minimize test case with:

	cargo fuzz tmin --sanitizer=none entity-validation fuzz/artifacts/entity-validation/crash-b2c4e0a452b93ecc2fe3a18a76c9c3c15df2990a

────────────────────────────────────────────────────────────────────────────────

Error: Fuzz target exited with exit status: 77
