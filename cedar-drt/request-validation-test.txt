warning: unused manifest key: dependencies.serde.feature
warning: unused import: `cedar_policy::Entity`
  --> /local/home/bhaktish/cedar-spec/cedar/cedar-testing/src/cedar_test_impl.rs:23:5
   |
23 | use cedar_policy::Entity;
   |     ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `schema`
   --> /local/home/bhaktish/cedar-spec/cedar/cedar-testing/src/cedar_test_impl.rs:413:13
    |
413 |             schema: &ValidatorSchema,
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_schema`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `entities`
   --> /local/home/bhaktish/cedar-spec/cedar/cedar-testing/src/cedar_test_impl.rs:414:13
    |
414 |             entities: Entities,
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_entities`

warning: unused variable: `schema`
   --> /local/home/bhaktish/cedar-spec/cedar/cedar-testing/src/cedar_test_impl.rs:421:9
    |
421 |         schema: &ValidatorSchema,
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_schema`

warning: unused variable: `request`
   --> /local/home/bhaktish/cedar-spec/cedar/cedar-testing/src/cedar_test_impl.rs:422:9
    |
422 |         request: &ast::Request,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_request`

warning: `cedar-testing` (lib) generated 5 warnings (run `cargo fix --lib -p cedar-testing` to apply 1 suggestion)
warning: unnecessary trailing semicolon
   --> src/lib.rs:336:13
    |
336 |             ;
    |             ^ help: remove this semicolon
    |
    = note: `#[warn(redundant_semicolons)]` on by default

warning: unnecessary trailing semicolon
   --> src/lib.rs:373:13
    |
373 |             ;
    |             ^ help: remove this semicolon

warning: `cedar-drt-inner` (lib) generated 2 warnings
   Compiling cedar-drt-inner v0.0.0 (/local/home/bhaktish/cedar-spec/cedar-drt/fuzz)
warning: unused import: `cedar_policy_core::ast`
  --> fuzz_targets/request-validation.rs:20:6
   |
20 |  use cedar_policy_core::ast;
   |      ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `abac::ABACPolicy`
  --> fuzz_targets/request-validation.rs:22:32
   |
22 |  use cedar_policy_generators::{abac::ABACPolicy, schema::Schema, settings::ABACSettings, hierarchy::Hierarchy, abac::ABACRequest};
   |                                ^^^^^^^^^^^^^^^^

warning: `cedar-drt-inner` (bin "request-validation") generated 2 warnings (run `cargo fix --bin "request-validation"` to apply 2 suggestions)
    Finished `release` profile [optimized + debuginfo] target(s) in 38.08s
warning: unused manifest key: dependencies.serde.feature
warning: unused import: `cedar_policy::Entity`
  --> /local/home/bhaktish/cedar-spec/cedar/cedar-testing/src/cedar_test_impl.rs:23:5
   |
23 | use cedar_policy::Entity;
   |     ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `schema`
   --> /local/home/bhaktish/cedar-spec/cedar/cedar-testing/src/cedar_test_impl.rs:413:13
    |
413 |             schema: &ValidatorSchema,
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_schema`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `entities`
   --> /local/home/bhaktish/cedar-spec/cedar/cedar-testing/src/cedar_test_impl.rs:414:13
    |
414 |             entities: Entities,
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_entities`

warning: unused variable: `schema`
   --> /local/home/bhaktish/cedar-spec/cedar/cedar-testing/src/cedar_test_impl.rs:421:9
    |
421 |         schema: &ValidatorSchema,
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_schema`

warning: unused variable: `request`
   --> /local/home/bhaktish/cedar-spec/cedar/cedar-testing/src/cedar_test_impl.rs:422:9
    |
422 |         request: &ast::Request,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_request`

warning: `cedar-testing` (lib) generated 5 warnings (run `cargo fix --lib -p cedar-testing` to apply 1 suggestion)
warning: unnecessary trailing semicolon
   --> src/lib.rs:336:13
    |
336 |             ;
    |             ^ help: remove this semicolon
    |
    = note: `#[warn(redundant_semicolons)]` on by default

warning: unnecessary trailing semicolon
   --> src/lib.rs:373:13
    |
373 |             ;
    |             ^ help: remove this semicolon

warning: `cedar-drt-inner` (lib) generated 2 warnings
warning: unused import: `cedar_policy_core::ast`
  --> fuzz_targets/request-validation.rs:20:6
   |
20 |  use cedar_policy_core::ast;
   |      ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `abac::ABACPolicy`
  --> fuzz_targets/request-validation.rs:22:32
   |
22 |  use cedar_policy_generators::{abac::ABACPolicy, schema::Schema, settings::ABACSettings, hierarchy::Hierarchy, abac::ABACRequest};
   |                                ^^^^^^^^^^^^^^^^

warning: `cedar-drt-inner` (bin "request-validation") generated 2 warnings (run `cargo fix --bin "request-validation"` to apply 2 suggestions)
    Finished `release` profile [optimized + debuginfo] target(s) in 0.12s
     Running `fuzz/target/x86_64-unknown-linux-gnu/release/request-validation -artifact_prefix=/local/home/bhaktish/cedar-spec/cedar-drt/fuzz/artifacts/request-validation/ /local/home/bhaktish/cedar-spec/cedar-drt/fuzz/corpus/request-validation`
WARNING: Failed to find function "__sanitizer_acquire_crash_state".
WARNING: Failed to find function "__sanitizer_print_stack_trace".
WARNING: Failed to find function "__sanitizer_set_death_callback".
INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 3451851709
INFO: Loaded 1 modules   (542800 inline 8-bit counters): 542800 [0x557500821848, 0x5575008a6098), 
INFO: Loaded 1 PC tables (542800 PCs): 542800 [0x5575008a6098,0x5575010ee598), 
INFO:      397 files found in /local/home/bhaktish/cedar-spec/cedar-drt/fuzz/corpus/request-validation
INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes
INFO: seed corpus: files: 397 min: 27b max: 29b total: 11366b rss: 55Mb
#398	INITED cov: 6456 ft: 12512 corp: 261/7439b exec/s: 199 rss: 101Mb
#426	NEW    cov: 6457 ft: 12513 corp: 262/7467b lim: 33 exec/s: 213 rss: 101Mb L: 28/29 MS: 3 CrossOver-ChangeBit-ChangeByte-
#454	NEW    cov: 6457 ft: 12515 corp: 263/7500b lim: 33 exec/s: 227 rss: 101Mb L: 33/33 MS: 3 ChangeBinInt-CrossOver-CMP- DE: "\377\377\377\377\377\377\000\364"-
#485	NEW    cov: 6458 ft: 12516 corp: 264/7533b lim: 33 exec/s: 242 rss: 101Mb L: 33/33 MS: 1 InsertRepeatedBytes-
#502	NEW    cov: 6458 ft: 12517 corp: 265/7560b lim: 33 exec/s: 251 rss: 101Mb L: 27/33 MS: 2 ChangeByte-ChangeBinInt-
#503	NEW    cov: 6458 ft: 12519 corp: 266/7587b lim: 33 exec/s: 251 rss: 101Mb L: 27/33 MS: 1 PersAutoDict- DE: "\377\377\377\377\377\377\000\364"-
#512	pulse  cov: 6458 ft: 12519 corp: 266/7587b lim: 33 exec/s: 256 rss: 101Mb
#524	NEW    cov: 6458 ft: 12525 corp: 267/7616b lim: 33 exec/s: 262 rss: 101Mb L: 29/33 MS: 1 CrossOver-
#526	NEW    cov: 6458 ft: 12526 corp: 268/7649b lim: 33 exec/s: 263 rss: 101Mb L: 33/33 MS: 2 CopyPart-CopyPart-
#527	NEW    cov: 6459 ft: 12540 corp: 269/7678b lim: 33 exec/s: 263 rss: 101Mb L: 29/33 MS: 1 ChangeByte-
#533	NEW    cov: 6459 ft: 12542 corp: 270/7708b lim: 33 exec/s: 266 rss: 101Mb L: 30/33 MS: 1 InsertByte-
	NEW_FUNC[1/1]: 0x5574fe4455e1
#537	NEW    cov: 6563 ft: 12948 corp: 271/7737b lim: 33 exec/s: 268 rss: 101Mb L: 29/33 MS: 4 CopyPart-CMP-CopyPart-EraseBytes- DE: "principa"-
#543	NEW    cov: 6564 ft: 12955 corp: 272/7767b lim: 33 exec/s: 271 rss: 101Mb L: 30/33 MS: 1 InsertByte-
#556	NEW    cov: 6564 ft: 12957 corp: 273/7798b lim: 33 exec/s: 278 rss: 101Mb L: 31/33 MS: 3 InsertRepeatedBytes-CrossOver-CopyPart-
#560	NEW    cov: 6564 ft: 12958 corp: 274/7826b lim: 33 exec/s: 280 rss: 101Mb L: 28/33 MS: 4 ShuffleBytes-ChangeBit-ShuffleBytes-PersAutoDict- DE: "\377\377\377\377\377\377\000\364"-
	NEW_FUNC[1/1]: 0x5574fef70fc1
#581	NEW    cov: 6568 ft: 12984 corp: 275/7855b lim: 33 exec/s: 290 rss: 101Mb L: 29/33 MS: 1 PersAutoDict- DE: "\377\377\377\377\377\377\000\364"-
#613	NEW    cov: 6568 ft: 12985 corp: 276/7883b lim: 33 exec/s: 306 rss: 101Mb L: 28/33 MS: 2 ChangeByte-InsertByte-
#646	NEW    cov: 6569 ft: 12987 corp: 277/7914b lim: 33 exec/s: 323 rss: 101Mb L: 31/33 MS: 3 ShuffleBytes-EraseBytes-CrossOver-
#674	NEW    cov: 6570 ft: 12996 corp: 278/7942b lim: 33 exec/s: 337 rss: 101Mb L: 28/33 MS: 3 ChangeBinInt-ChangeBit-PersAutoDict- DE: "\377\377\377\377\377\377\000\364"-
#690	NEW    cov: 6570 ft: 12998 corp: 279/7974b lim: 33 exec/s: 345 rss: 101Mb L: 32/33 MS: 1 CopyPart-
#711	NEW    cov: 6570 ft: 13143 corp: 280/8003b lim: 33 exec/s: 355 rss: 101Mb L: 29/33 MS: 1 InsertByte-
#712	NEW    cov: 6571 ft: 13146 corp: 281/8032b lim: 33 exec/s: 356 rss: 101Mb L: 29/33 MS: 1 CopyPart-
	NEW_FUNC[1/1]: 0x5574fe3623e1
#723	NEW    cov: 6577 ft: 13154 corp: 282/8065b lim: 33 exec/s: 361 rss: 101Mb L: 33/33 MS: 1 CrossOver-
#745	REDUCE cov: 6577 ft: 13154 corp: 282/8064b lim: 33 exec/s: 372 rss: 101Mb L: 28/33 MS: 2 ChangeBit-EraseBytes-
#753	NEW    cov: 6577 ft: 13157 corp: 283/8093b lim: 33 exec/s: 376 rss: 101Mb L: 29/33 MS: 3 ChangeBit-ChangeBinInt-PersAutoDict- DE: "\377\377\377\377\377\377\000\364"-
#771	NEW    cov: 6578 ft: 13158 corp: 284/8122b lim: 33 exec/s: 385 rss: 101Mb L: 29/33 MS: 3 ShuffleBytes-ChangeByte-ChangeBit-
#785	NEW    cov: 6578 ft: 13159 corp: 285/8154b lim: 33 exec/s: 392 rss: 101Mb L: 32/33 MS: 4 InsertByte-InsertByte-ChangeBinInt-InsertByte-
#811	NEW    cov: 6578 ft: 13162 corp: 286/8182b lim: 33 exec/s: 405 rss: 101Mb L: 28/33 MS: 1 PersAutoDict- DE: "principa"-
#834	NEW    cov: 6578 ft: 13169 corp: 287/8215b lim: 33 exec/s: 417 rss: 101Mb L: 33/33 MS: 3 InsertRepeatedBytes-ChangeByte-InsertByte-
#867	NEW    cov: 6578 ft: 13253 corp: 288/8248b lim: 33 exec/s: 289 rss: 102Mb L: 33/33 MS: 3 InsertByte-PersAutoDict-InsertRepeatedBytes- DE: "principa"-
#897	NEW    cov: 6578 ft: 13298 corp: 289/8280b lim: 33 exec/s: 299 rss: 102Mb L: 32/33 MS: 5 ShuffleBytes-EraseBytes-InsertRepeatedBytes-ChangeByte-CMP- DE: "resourceApplySpec"-
#898	NEW    cov: 6578 ft: 13303 corp: 290/8312b lim: 33 exec/s: 299 rss: 102Mb L: 32/33 MS: 1 ChangeBit-
#935	NEW    cov: 6579 ft: 13305 corp: 291/8341b lim: 33 exec/s: 311 rss: 102Mb L: 29/33 MS: 2 InsertByte-PersAutoDict- DE: "resourceApplySpec"-
	NEW_FUNC[1/3]: 0x5574ff0750e1
	NEW_FUNC[2/3]: 0x5574fe3960e1
#937	NEW    cov: 6592 ft: 13557 corp: 292/8374b lim: 33 exec/s: 312 rss: 102Mb L: 33/33 MS: 2 ShuffleBytes-InsertRepeatedBytes-
#942	NEW    cov: 6594 ft: 13559 corp: 293/8405b lim: 33 exec/s: 314 rss: 102Mb L: 31/33 MS: 4 ChangeBinInt-CMP-InsertRepeatedBytes-ShuffleBytes- DE: "\000\000\0008"-
#970	NEW    cov: 6595 ft: 13569 corp: 294/8435b lim: 33 exec/s: 323 rss: 102Mb L: 30/33 MS: 3 ChangeByte-InsertByte-ShuffleBytes-
#979	NEW    cov: 6596 ft: 13570 corp: 295/8467b lim: 33 exec/s: 326 rss: 102Mb L: 32/33 MS: 4 ShuffleBytes-PersAutoDict-ChangeBit-InsertByte- DE: "\000\000\0008"-
#992	NEW    cov: 6604 ft: 13578 corp: 296/8498b lim: 33 exec/s: 330 rss: 102Mb L: 31/33 MS: 3 CopyPart-ChangeBit-PersAutoDict- DE: "principa"-
#1001	NEW    cov: 6607 ft: 13584 corp: 297/8529b lim: 33 exec/s: 333 rss: 102Mb L: 31/33 MS: 4 InsertByte-CrossOver-ChangeBinInt-InsertByte-
#1009	NEW    cov: 6607 ft: 13585 corp: 298/8562b lim: 33 exec/s: 336 rss: 102Mb L: 33/33 MS: 3 InsertByte-ChangeBinInt-InsertRepeatedBytes-
#1033	NEW    cov: 6607 ft: 13589 corp: 299/8594b lim: 33 exec/s: 344 rss: 102Mb L: 32/33 MS: 4 ChangeASCIIInt-EraseBytes-CrossOver-ShuffleBytes-
#1067	NEW    cov: 6608 ft: 13590 corp: 300/8626b lim: 33 exec/s: 355 rss: 102Mb L: 32/33 MS: 4 ChangeBinInt-ChangeBinInt-CrossOver-CrossOver-
thread '<unnamed>' panicked at /local/home/bhaktish/cedar-spec/cedar-drt/fuzz/src/lib.rs:340:17:
Definitional Errors: ["principal"]
, Rust output: Request { principal: Known { euid: EntityUID { ty: EntityType(Name(UncheckedName { id: Id("At0x040000x04"), path: [], loc: None })), eid: Eid(""), loc: None }, loc: None }, action: Known { euid: EntityUID { ty: EntityType(Name(UncheckedName { id: Id("Action"), path: [], loc: Some(Loc { span: SourceSpan { offset: SourceOffset(0), length: 6 }, src: "Action" }) })), eid: Eid("action"), loc: None }, loc: None }, resource: Known { euid: EntityUID { ty: EntityType(Name(UncheckedName { id: Id("At0x040000x04"), path: [], loc: None })), eid: Eid(""), loc: None }, loc: None }, context: Some(Value({})) }
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
==16204== ERROR: libFuzzer: deadly signal
NOTE: libFuzzer has rudimentary signal handlers.
      Combine libFuzzer with AddressSanitizer or similar for better crash reports.
SUMMARY: libFuzzer: deadly signal
MS: 2 ChangeBit-ChangeByte-; base unit: f6feded26d499442b560a6fb73176425cdd4def5
0x22,0x3,0x0,0x22,0x3,0x2e,0x0,0x37,0x0,0x7a,0x0,0x4,0x0,0x0,0x3f,0x0,0x7a,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3a,0x1,
\"\003\000\"\003.\0007\000z\000\004\000\000?\000z\000\004\000\000\000\000\000\000\000\003:\001
artifact_prefix='/local/home/bhaktish/cedar-spec/cedar-drt/fuzz/artifacts/request-validation/'; Test unit written to /local/home/bhaktish/cedar-spec/cedar-drt/fuzz/artifacts/request-validation/crash-768415b088b8d961b8f4442fd1cf17045a8c5652
Base64: IgMAIgMuADcAegAEAAA/AHoABAAAAAAAAAADOgE=

────────────────────────────────────────────────────────────────────────────────

Failing input:

	fuzz/artifacts/request-validation/crash-768415b088b8d961b8f4442fd1cf17045a8c5652

Output of `std::fmt::Debug`:

	FuzzTargetInput {
	    schema: Schema {
	        schema: NamespaceDefinition {
	            common_types: {},
	            entity_types: {
	                UnreservedId(
	                    Id(
	                        "At0x040000x04",
	                    ),
	                ): EntityType {
	                    member_of_types: [
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "i",
	                                ),
	                                path: [],
	                                loc: None,
	                            },
	                        ),
	                    ],
	                    shape: AttributesOrContext(
	                        Type(
	                            Record {
	                                attributes: {},
	                                additional_attributes: false,
	                            },
	                        ),
	                    ),
	                },
	                UnreservedId(
	                    Id(
	                        "i",
	                    ),
	                ): EntityType {
	                    member_of_types: [],
	                    shape: AttributesOrContext(
	                        Type(
	                            Record {
	                                attributes: {},
	                                additional_attributes: false,
	                            },
	                        ),
	                    ),
	                },
	            },
	            actions: {
	                "action": ActionType {
	                    attributes: None,
	                    applies_to: Some(
	                        ApplySpec {
	                            resource_types: [
	                                Name(
	                                    UncheckedName {
	                                        id: Id(
	                                            "At0x040000x04",
	                                        ),
	                                        path: [],
	                                        loc: None,
	                                    },
	                                ),
	                                Name(
	                                    UncheckedName {
	                                        id: Id(
	                                            "i",
	                                        ),
	                                        path: [],
	                                        loc: None,
	                                    },
	                                ),
	                            ],
	                            principal_types: [
	                                Name(
	                                    UncheckedName {
	                                        id: Id(
	                                            "At0x040000x04",
	                                        ),
	                                        path: [],
	                                        loc: None,
	                                    },
	                                ),
	                                Name(
	                                    UncheckedName {
	                                        id: Id(
	                                            "i",
	                                        ),
	                                        path: [],
	                                        loc: None,
	                                    },
	                                ),
	                            ],
	                            context: AttributesOrContext(
	                                Type(
	                                    Record {
	                                        attributes: {},
	                                        additional_attributes: false,
	                                    },
	                                ),
	                            ),
	                        },
	                    ),
	                    member_of: Some(
	                        [],
	                    ),
	                },
	            },
	        },
	        namespace: None,
	        settings: ABACSettings {
	            match_types: false,
	            enable_extensions: true,
	            max_depth: 7,
	            max_width: 7,
	            enable_additional_attributes: true,
	            enable_like: true,
	            enable_action_groups_and_attrs: true,
	            enable_arbitrary_func_call: true,
	            enable_unknowns: false,
	            enable_unspecified_apply_spec: true,
	            enable_action_in_constraints: true,
	        },
	        constant_pool: ConstantPool {
	            int_constants: [],
	            string_constants: [],
	        },
	        unknown_pool: UnknownPool {
	            unknowns: RefCell {
	                value: HashMap(
	                    {},
	                ),
	            },
	        },
	        ext_funcs: AvailableExtensionFunctions {
	            constructors: [
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "ip",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: true,
	                    parameter_types: [
	                        String,
	                    ],
	                    return_ty: IPAddr,
	                },
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "decimal",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: true,
	                    parameter_types: [
	                        String,
	                    ],
	                    return_ty: Decimal,
	                },
	            ],
	            all: [
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "ip",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: true,
	                    parameter_types: [
	                        String,
	                    ],
	                    return_ty: IPAddr,
	                },
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "isIpv4",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: false,
	                    parameter_types: [
	                        IPAddr,
	                    ],
	                    return_ty: Bool,
	                },
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "isIpv6",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: false,
	                    parameter_types: [
	                        IPAddr,
	                    ],
	                    return_ty: Bool,
	                },
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "isLoopback",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: false,
	                    parameter_types: [
	                        IPAddr,
	                    ],
	                    return_ty: Bool,
	                },
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "isMulticast",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: false,
	                    parameter_types: [
	                        IPAddr,
	                    ],
	                    return_ty: Bool,
	                },
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "isInRange",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: false,
	                    parameter_types: [
	                        IPAddr,
	                        IPAddr,
	                    ],
	                    return_ty: Bool,
	                },
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "decimal",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: true,
	                    parameter_types: [
	                        String,
	                    ],
	                    return_ty: Decimal,
	                },
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "lessThan",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: false,
	                    parameter_types: [
	                        Decimal,
	                        Decimal,
	                    ],
	                    return_ty: Bool,
	                },
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "lessThanOrEqual",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: false,
	                    parameter_types: [
	                        Decimal,
	                        Decimal,
	                    ],
	                    return_ty: Bool,
	                },
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "greaterThan",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: false,
	                    parameter_types: [
	                        Decimal,
	                        Decimal,
	                    ],
	                    return_ty: Bool,
	                },
	                AvailableExtensionFunction {
	                    name: Name(
	                        UncheckedName {
	                            id: Id(
	                                "greaterThanOrEqual",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                    is_constructor: false,
	                    parameter_types: [
	                        Decimal,
	                        Decimal,
	                    ],
	                    return_ty: Bool,
	                },
	            ],
	            constructors_by_type: HashMap(
	                {},
	            ),
	            all_by_type: HashMap(
	                {},
	            ),
	        },
	        entity_types: [
	            EntityType(
	                Name(
	                    UncheckedName {
	                        id: Id(
	                            "At0x040000x04",
	                        ),
	                        path: [],
	                        loc: None,
	                    },
	                ),
	            ),
	            EntityType(
	                Name(
	                    UncheckedName {
	                        id: Id(
	                            "i",
	                        ),
	                        path: [],
	                        loc: None,
	                    },
	                ),
	            ),
	        ],
	        principal_types: [
	            EntityType(
	                Name(
	                    UncheckedName {
	                        id: Id(
	                            "At0x040000x04",
	                        ),
	                        path: [],
	                        loc: None,
	                    },
	                ),
	            ),
	            EntityType(
	                Name(
	                    UncheckedName {
	                        id: Id(
	                            "i",
	                        ),
	                        path: [],
	                        loc: None,
	                    },
	                ),
	            ),
	        ],
	        actions_eids: [
	            Eid(
	                "action",
	            ),
	        ],
	        resource_types: [
	            EntityType(
	                Name(
	                    UncheckedName {
	                        id: Id(
	                            "At0x040000x04",
	                        ),
	                        path: [],
	                        loc: None,
	                    },
	                ),
	            ),
	            EntityType(
	                Name(
	                    UncheckedName {
	                        id: Id(
	                            "i",
	                        ),
	                        path: [],
	                        loc: None,
	                    },
	                ),
	            ),
	        ],
	        attributes: [],
	        attributes_by_type: HashMap(
	            {},
	        ),
	    },
	    hierarchy: Hierarchy {
	        entities: HashMap(
	            {
	                EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "At0x040000x04",
	                                ),
	                                path: [],
	                                loc: None,
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "",
	                    ),
	                    loc: None,
	                }: Entity {
	                    uid: EntityUID {
	                        ty: EntityType(
	                            Name(
	                                UncheckedName {
	                                    id: Id(
	                                        "At0x040000x04",
	                                    ),
	                                    path: [],
	                                    loc: None,
	                                },
	                            ),
	                        ),
	                        eid: Eid(
	                            "",
	                        ),
	                        loc: None,
	                    },
	                    attrs: {},
	                    ancestors: {
	                        EntityUID {
	                            ty: EntityType(
	                                Name(
	                                    UncheckedName {
	                                        id: Id(
	                                            "i",
	                                        ),
	                                        path: [],
	                                        loc: None,
	                                    },
	                                ),
	                            ),
	                            eid: Eid(
	                                "",
	                            ),
	                            loc: None,
	                        },
	                    },
	                },
	                EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "i",
	                                ),
	                                path: [],
	                                loc: None,
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "",
	                    ),
	                    loc: None,
	                }: Entity {
	                    uid: EntityUID {
	                        ty: EntityType(
	                            Name(
	                                UncheckedName {
	                                    id: Id(
	                                        "i",
	                                    ),
	                                    path: [],
	                                    loc: None,
	                                },
	                            ),
	                        ),
	                        eid: Eid(
	                            "",
	                        ),
	                        loc: None,
	                    },
	                    attrs: {},
	                    ancestors: {},
	                },
	            },
	        ),
	        uids: [
	            EntityUID {
	                ty: EntityType(
	                    Name(
	                        UncheckedName {
	                            id: Id(
	                                "At0x040000x04",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                ),
	                eid: Eid(
	                    "",
	                ),
	                loc: None,
	            },
	            EntityUID {
	                ty: EntityType(
	                    Name(
	                        UncheckedName {
	                            id: Id(
	                                "i",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                ),
	                eid: Eid(
	                    "",
	                ),
	                loc: None,
	            },
	        ],
	        uids_by_type: HashMap(
	            {
	                EntityType(
	                    Name(
	                        UncheckedName {
	                            id: Id(
	                                "At0x040000x04",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                ): EntityUIDs {
	                    indices: HashMap(
	                        {
	                            EntityUID {
	                                ty: EntityType(
	                                    Name(
	                                        UncheckedName {
	                                            id: Id(
	                                                "At0x040000x04",
	                                            ),
	                                            path: [],
	                                            loc: None,
	                                        },
	                                    ),
	                                ),
	                                eid: Eid(
	                                    "",
	                                ),
	                                loc: None,
	                            }: 0,
	                        },
	                    ),
	                    uids: [
	                        EntityUID {
	                            ty: EntityType(
	                                Name(
	                                    UncheckedName {
	                                        id: Id(
	                                            "At0x040000x04",
	                                        ),
	                                        path: [],
	                                        loc: None,
	                                    },
	                                ),
	                            ),
	                            eid: Eid(
	                                "",
	                            ),
	                            loc: None,
	                        },
	                    ],
	                },
	                EntityType(
	                    Name(
	                        UncheckedName {
	                            id: Id(
	                                "i",
	                            ),
	                            path: [],
	                            loc: None,
	                        },
	                    ),
	                ): EntityUIDs {
	                    indices: HashMap(
	                        {
	                            EntityUID {
	                                ty: EntityType(
	                                    Name(
	                                        UncheckedName {
	                                            id: Id(
	                                                "i",
	                                            ),
	                                            path: [],
	                                            loc: None,
	                                        },
	                                    ),
	                                ),
	                                eid: Eid(
	                                    "",
	                                ),
	                                loc: None,
	                            }: 0,
	                        },
	                    ),
	                    uids: [
	                        EntityUID {
	                            ty: EntityType(
	                                Name(
	                                    UncheckedName {
	                                        id: Id(
	                                            "i",
	                                        ),
	                                        path: [],
	                                        loc: None,
	                                    },
	                                ),
	                            ),
	                            eid: Eid(
	                                "",
	                            ),
	                            loc: None,
	                        },
	                    ],
	                },
	            },
	        ),
	        entity_types: [
	            EntityType(
	                Name(
	                    UncheckedName {
	                        id: Id(
	                            "At0x040000x04",
	                        ),
	                        path: [],
	                        loc: None,
	                    },
	                ),
	            ),
	            EntityType(
	                Name(
	                    UncheckedName {
	                        id: Id(
	                            "i",
	                        ),
	                        path: [],
	                        loc: None,
	                    },
	                ),
	            ),
	        ],
	    },
	    requests: [
	        ABACRequest(
	            Request {
	                principal: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "At0x040000x04",
	                                ),
	                                path: [],
	                                loc: None,
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "",
	                    ),
	                    loc: None,
	                },
	                action: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "Action",
	                                ),
	                                path: [],
	                                loc: Some(
	                                    Loc {
	                                        span: SourceSpan {
	                                            offset: SourceOffset(
	                                                0,
	                                            ),
	                                            length: 6,
	                                        },
	                                        src: "Action",
	                                    },
	                                ),
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "action",
	                    ),
	                    loc: None,
	                },
	                resource: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "At0x040000x04",
	                                ),
	                                path: [],
	                                loc: None,
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "",
	                    ),
	                    loc: None,
	                },
	                context: Value(
	                    {},
	                ),
	            },
	        ),
	        ABACRequest(
	            Request {
	                principal: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "At0x040000x04",
	                                ),
	                                path: [],
	                                loc: None,
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "",
	                    ),
	                    loc: None,
	                },
	                action: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "Action",
	                                ),
	                                path: [],
	                                loc: Some(
	                                    Loc {
	                                        span: SourceSpan {
	                                            offset: SourceOffset(
	                                                0,
	                                            ),
	                                            length: 6,
	                                        },
	                                        src: "Action",
	                                    },
	                                ),
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "action",
	                    ),
	                    loc: None,
	                },
	                resource: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "At0x040000x04",
	                                ),
	                                path: [],
	                                loc: None,
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "",
	                    ),
	                    loc: None,
	                },
	                context: Value(
	                    {},
	                ),
	            },
	        ),
	        ABACRequest(
	            Request {
	                principal: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "At0x040000x04",
	                                ),
	                                path: [],
	                                loc: None,
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "",
	                    ),
	                    loc: None,
	                },
	                action: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "Action",
	                                ),
	                                path: [],
	                                loc: Some(
	                                    Loc {
	                                        span: SourceSpan {
	                                            offset: SourceOffset(
	                                                0,
	                                            ),
	                                            length: 6,
	                                        },
	                                        src: "Action",
	                                    },
	                                ),
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "action",
	                    ),
	                    loc: None,
	                },
	                resource: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "At0x040000x04",
	                                ),
	                                path: [],
	                                loc: None,
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "",
	                    ),
	                    loc: None,
	                },
	                context: Value(
	                    {},
	                ),
	            },
	        ),
	        ABACRequest(
	            Request {
	                principal: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "At0x040000x04",
	                                ),
	                                path: [],
	                                loc: None,
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "",
	                    ),
	                    loc: None,
	                },
	                action: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "Action",
	                                ),
	                                path: [],
	                                loc: Some(
	                                    Loc {
	                                        span: SourceSpan {
	                                            offset: SourceOffset(
	                                                0,
	                                            ),
	                                            length: 6,
	                                        },
	                                        src: "Action",
	                                    },
	                                ),
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "action",
	                    ),
	                    loc: None,
	                },
	                resource: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "At0x040000x04",
	                                ),
	                                path: [],
	                                loc: None,
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "",
	                    ),
	                    loc: None,
	                },
	                context: Value(
	                    {},
	                ),
	            },
	        ),
	        ABACRequest(
	            Request {
	                principal: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "At0x040000x04",
	                                ),
	                                path: [],
	                                loc: None,
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "",
	                    ),
	                    loc: None,
	                },
	                action: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "Action",
	                                ),
	                                path: [],
	                                loc: Some(
	                                    Loc {
	                                        span: SourceSpan {
	                                            offset: SourceOffset(
	                                                0,
	                                            ),
	                                            length: 6,
	                                        },
	                                        src: "Action",
	                                    },
	                                ),
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "action",
	                    ),
	                    loc: None,
	                },
	                resource: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "At0x040000x04",
	                                ),
	                                path: [],
	                                loc: None,
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "",
	                    ),
	                    loc: None,
	                },
	                context: Value(
	                    {},
	                ),
	            },
	        ),
	        ABACRequest(
	            Request {
	                principal: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "At0x040000x04",
	                                ),
	                                path: [],
	                                loc: None,
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "",
	                    ),
	                    loc: None,
	                },
	                action: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "Action",
	                                ),
	                                path: [],
	                                loc: Some(
	                                    Loc {
	                                        span: SourceSpan {
	                                            offset: SourceOffset(
	                                                0,
	                                            ),
	                                            length: 6,
	                                        },
	                                        src: "Action",
	                                    },
	                                ),
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "action",
	                    ),
	                    loc: None,
	                },
	                resource: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "At0x040000x04",
	                                ),
	                                path: [],
	                                loc: None,
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "",
	                    ),
	                    loc: None,
	                },
	                context: Value(
	                    {},
	                ),
	            },
	        ),
	        ABACRequest(
	            Request {
	                principal: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "At0x040000x04",
	                                ),
	                                path: [],
	                                loc: None,
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "",
	                    ),
	                    loc: None,
	                },
	                action: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "Action",
	                                ),
	                                path: [],
	                                loc: Some(
	                                    Loc {
	                                        span: SourceSpan {
	                                            offset: SourceOffset(
	                                                0,
	                                            ),
	                                            length: 6,
	                                        },
	                                        src: "Action",
	                                    },
	                                ),
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "action",
	                    ),
	                    loc: None,
	                },
	                resource: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "At0x040000x04",
	                                ),
	                                path: [],
	                                loc: None,
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "",
	                    ),
	                    loc: None,
	                },
	                context: Value(
	                    {},
	                ),
	            },
	        ),
	        ABACRequest(
	            Request {
	                principal: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "At0x040000x04",
	                                ),
	                                path: [],
	                                loc: None,
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "",
	                    ),
	                    loc: None,
	                },
	                action: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "Action",
	                                ),
	                                path: [],
	                                loc: Some(
	                                    Loc {
	                                        span: SourceSpan {
	                                            offset: SourceOffset(
	                                                0,
	                                            ),
	                                            length: 6,
	                                        },
	                                        src: "Action",
	                                    },
	                                ),
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "action",
	                    ),
	                    loc: None,
	                },
	                resource: EntityUID {
	                    ty: EntityType(
	                        Name(
	                            UncheckedName {
	                                id: Id(
	                                    "At0x040000x04",
	                                ),
	                                path: [],
	                                loc: None,
	                            },
	                        ),
	                    ),
	                    eid: Eid(
	                        "",
	                    ),
	                    loc: None,
	                },
	                context: Value(
	                    {},
	                ),
	            },
	        ),
	    ],
	}

Reproduce with:

	cargo fuzz run --sanitizer=none request-validation fuzz/artifacts/request-validation/crash-768415b088b8d961b8f4442fd1cf17045a8c5652

Minimize test case with:

	cargo fuzz tmin --sanitizer=none request-validation fuzz/artifacts/request-validation/crash-768415b088b8d961b8f4442fd1cf17045a8c5652

────────────────────────────────────────────────────────────────────────────────

Error: Fuzz target exited with exit status: 77
